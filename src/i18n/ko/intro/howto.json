{
  "basic": [
    "<p class='text-body-2'>props, event, class 등 원래의 ui framwork가 제공하는 부분은 모두 동일하게 사용가능합니다.",
    "단, event의 경우 template 영역에서 component event 가 호출하는 method를 v-on:method이름='method이름'과 같이 입력합니다.</p>",
    "<span class=`text-h5`>◆ Sample code</span>",
    "<pre class=`language-js`><code class=\"language-js\">\n< template >\n< v-iterator :dynamicArg=`screen` :data=`$data` @btnClick=`btnClick`/>\n< /template >",
    "< script >\nexport default {\n  data: () => ({\n    screen: {\n      items: [\n        { component: 'container', fluid: true, items: [\n          { component: 'btn', color: 'grey lighten-3', itemtext: 'Block Button', style: 'width: 100%', events: [{ event: 'click', method: 'btnClick'}] },\n          { component: 'card', flat: true, items: [ { component: 'card-text', itemtext: 'textData'} ]}\n        ]}\n      ]\n    },\n    textData: 'Button clicked!',\n    clickedCount: 0\n  }),",
    "  methods: {\n    btnClick() {\n      this.clickedCount++;\n      this.textData = String('Button clicked!').concat(':', this.clickedCount)\n    }\n  }\n}",
    "< /script > ",
    "</code></pre>",

    "<span class=`text-h5`>◆ Properties</span>",
    "<span class='text-body-2'><strong>- dynamicArg</strong>: 화면 구조에 대한 정보를 담은 {items: []} 형태의 object를 binding합니다.  props, data, computed, method return value 를 binding할 수 있습니다.",
    "  * 구조는 {items: [{component: '컴퍼넌트 이름', class: 값, style: 값, 속성: 값 }]} 형태를 지니며, component의 하위에 component를 포함 시킬 경우 위 예제 처럼 부모 component 가 포함된 object에 items 속성을 추가합니다.</span>",
    "<pre class=`language-js`><code class=\"language-js\">{ items: [{ component: 'container', class: 'pa-0', items: [{component: 'btn', style: 'width: 100px;', text: true }] }] }</code></pre>",
    "<span class='text-body-2'><strong>- data</strong>: 실제 컴퍼넌트가 사용 할 data object를 binding 합니다. props 나 computed는 binding 할 수 없습니다.</span>",
    "",
    "<span class=`text-h5`>◆ v-for</span>",
    "<span class='text-body-2'>- 만약 v-for를 사용하여 하위 component 를 추가해야 하는 경우 아래와 같이 작성합니다.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'container', itemsfor: 5, subItemName: 'item', items: [{component: 'btn', itemtext: 'item'}] }] }",
    "</code></pre>",
    
    "<span class='text-body-2'>  * 위 코드를 기존의 vue template code로 풀어보면 다음과 같습니다.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "< v-container ><v-for=\"item in 5\">< v-btn >{{item}}< /v-btn ></v-for> < /v-container >",
    "</code></pre>",

    "<span class='text-body-2'>- v-for 에 items라는 data array를 사용하고 싶다면 아래와 같이 작성합니다.",
    "items = [{name: 'test1', name: 'test2'}] 일때</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'container', itemsfor: 'items', subItemName: 'item', items: [{component: 'btn', itemtext: 'item.name'}] }] }",
    "</code></pre>",
    "<span class='text-body-2'>또는</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'container', itemsfor: this.items, subItemName: 'item', items: [{component: 'btn', itemtext: 'item.name'} ]} ]}",
    "</code></pre>",

    "<span class='text-body-2'>- subItemName은 지정하지 않을 수도 있으며 지정하지 않은 경우 하위 컴퍼넌트에서는 'subItem' 이라는 이름으로 사용합니다.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'container', itemsfor: 'items', items: [{component: 'btn', itemtext: 'subItem'} ]} ]}",
    "</code></pre>",

    "<span class=`text-h5`>◆ v-if / v-show",
    "<span class='text-body-2'>- v-if 또는 v-show 는 다음과 같이 사용합니다.",
    "item = {type: 'group', value: 'test'}</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'text', if: [{target: 'item.type', value: 'group'}, {target: 'item.value', value: 'test'}] }] }",
    "{ items: [{ component: 'text', show: [{target: 'item.type', value: 'group'}, {target: 'item.value', value: 'test'}] }] }",
    "</code></pre>",

    "<span class='text-body-2'>다음과 같은 방법으로도 사용 가능합니다.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'text', if: this.item.type === 'group' && this.item.value === 'test' }] }",
    "</code></pre>",

    "<span class=`text-h5`>◆ event</span>",
    "<span class='text-body-2'>- event 는 다음과 같이 사용합니다.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'btn', evnts: [{event: 'click', method: 'method name'}] }] }",
    "</code></pre>",

    "<span class='text-body-2'>v-iterator에서 event는 넘겨줘야할 값을 지정하지 않은 경우 event 객체를 전달합니다.",
    "만약 넘겨줘야할 값을 지정하고 싶은 경우 아래와 같이 작성하세요.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'btn', evnts: [{event: 'click', value: 'item', method: 'btnClick'}] }] }",
    "",
    
    "methods: { btnClick(param) { alert('Button is clicked with ' + param) } }",
    "</code></pre>",
    "<span class='text-body-2'>위의 item이 data에 선언된 경우 item object value가, 선언되지 않은 경우 'item' 문자열이 'btnClick' method에 전달 됩니다.",
    "value와 event객체를 같이 받으시려면 method를 선언할때 method(param, event)로 선언하세요.</span>",
    "",

    "<span class='text-body-2'>method를 호출하지 않고 function을 바로 실행하는 방법도 있습니다.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'btn', evnts: [{ event: 'click', func: (event) => {console.log(event)} }] }] }",
    "</code></pre>",
    "",
    "<span class='text-body-2'>method와 마찬가지로 value와 event를 function에 전달하고 싶은 경우 아래와 같이 처리 가능합니다.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'btn', evnts: [{ event: 'click', value: 'item', func: (item, event) => {console.log(item, event)} }] }] }",
    "</code></pre>",

    "<span class=`text-h5`>◆ v-model</span>",
    "<span class='text-body-2'>v-model은 아래와 같이 사용합니다.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "data () => {itemtext: ''}",
    "{ items: [{ component: 'text-field', model: 'itemtext' }",
    "</code></pre>",

    "<span class=`text-h5`>◆ slot</span>",
    "<span class='text-body-2'>- 반환값이 없는 경우",
    "slots: [{name: 'slot name', items: [하위 component]}]</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ component: 'btn', class: 'ma-2', loading: 'loading2', disabled: 'loading2', itemtext: 'Custom Loader', color: 'success',",
    "  evnts: [{ event: 'click', method: 'changeLoader', value: '2'}],",
    "  slots: [{ name: 'loader', items: [{ component: 'text', class: 'ma-0 pa-0', itemtext: 'Loading...'}]}]",
    "}",
    "</code></pre>",

    "<span class='text-body-2'>- 반환값이 있는 경우",
    "slots: [{name: 'slot name', type: 'data', slotDataName: ' ', items: [] }]",
    "slotDataName을 지정하지 않은 경우 default name은 'slotData' 임</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ component: 'div', itemsfor: 8, items: [",
    " { component: 'item', slots: [",
    "   {name: 'default', type: 'data', slotDataName: 'slot', items: [",
    "     { component: 'chip', activeClass: 'purple--text', inputValue: 'slot.active', ",
    "       evnts: [{event: 'click', value: 'slot.toggle', func: e => e()}], ",
    "       itemtext: {value: 'subItem', func: e => `Tag ${e}`}",
    "     }]",
    "   }]",
    " }]",
    "}",
    "</code></pre>",

    "<span class=`text-h5`>◆ reference</span>",
    "<span class='text-body-2'>하위 컴퍼넌트를 직접 호출해야 할때 reference를 사용하게 되는데,",
    "v-iterator에서는 화면 구성을 v-iterator component 내부에서 해석해야 하는 문제로 아래와 같이 표현하게 되었습니다.</span>",
    "<pre class=`language-js`><code class=\"language-js\">\n< template >\n< v-iterator :ref=\"iterator\" :dynamicArg=\"screen\" :data=\"$data\" />\n< /template >",
    "< script >\nexport default {\ndata: () => ({",
    "   screen: { items: [",
    "     { component: 'sheet', height: '600', items: [",
    "         { component: 'calendar', ref: 'calendar', model: 'focus', color: 'primary', type: 'category',",
    "           categoryShowAll: true, categories: 'categories', events: 'events', eventColor: 'eventColor',",
    "           evnts: [{ event: 'change', method: 'changeCalendar'}]",
    "         }]",
    "     }]",
    "   ]}",
    "   focus: '', events: [], eventColor: (event) => event.color",
    "}),",
    "methods: { changeCalendar() { this.calendar = this.$refs.iterator.getRef('calendar') }",
    "}\n< /script > ",
    "</code></pre>",
    "<span class='text-body-2'>즉, template 영역에서 v-iterator component를 reference로 지정(:ref=\"iterator\")한 뒤, 화면 정의에서 실제 reference를 사용할 component 위치에 ref 속성(ref: 'calendar')을 지정합니다. </span>",
    "<span class='text-body-2'>실제 reference를 사용할 때에는 predefine 되어 있는 getRef('화면 정의 내의 ref 속성 값')를 호출(this.$refs.iterator.getRef('calendar'))하여 사용합니다.</span>",
    "",

    "<span class=`text-h5`>◆ 기타</span>",
    "<span class='text-body-2'><code>- itemtext</code>는 다음과 같은 상황을 대처하기 위해 추가된 속성입니다.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "< template >< v-btn >Test< /v-btn >< /template >",
    "</code></pre>",
    "<span class='text-body-2'>위와 같은 경우 v-iterator는 다음과 같이 표현합니다.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{items: [ {component: 'btn', itemtext: 'Test' } ]}",
    "</code></pre>",
    "<span class='text-body-2'>만약 text를 변형하여 사용하고 싶은 경우 다음과 같이 사용 가능합니다.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{items: [ {component: 'btn', itemtext: {value: 'Test', func(t) => String('Button-').concat(t) } } ]}",
    "</code></pre>",
    "<span class='text-body-2'>- 만약 string이 아닌 html을 적용하고 싶다면 'itemtext' 대신 'html' 속성을 사용하세요.</span>",
    "",
    "<span class='text-body-2'>- vuetify와 element를 동시에 사용하는 경우 component 이름의 중복을 방지하기 위해 'framework' 속성을 사용합니다.</span>",
    "<span class='text-body-2'>default fraework 는 vuetify 입니다.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{items: [ {component: 'btn', itemtext: 'Vuetify Button' }, {component: 'btn', framework: 'el', itemtext: 'Element Button' } ]}",
    "</code></pre>",
    "<span class='text-body-2'></span>",
    ""
  ]
}