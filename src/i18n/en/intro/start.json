{
  "intro": [
    "<p class='text-body-2'>v-iterator was created to make using various Vue UI frameworks more convenient.",
    "v-iterator is declared in the <code>template</code> area of ​​the vue file, and the actual UI structure can be designed using data, computed, and function.",
    "",
    "<strong>◆ Supported Framework</strong>",
    "Vuetify",
    "Element UI",
    "Ag Grid",
    "Ag Chart",
    "",
    "<strong>◆ Advantages</strong>",
    "1. Screen configuration can be saved as DB or a separate file.",
    "<span class='text-caption'>- If you change the screen configuration, you can reflect it without building the front-end source again.</span>",
    "2. Increased readability",
    "<span class='text-caption'>- It is composed of object and parent/chlid structure, so it is easier to access even if you are not familiar with vue's template syntax.</span>",
    "3. Increased maintainability",
    "<span class='text-caption'>- Even if the UI framework is updated and the usage syntax is changed, the syntax of v-iterator does not change, so you can update the latest frmawork with minimal impact of the change.</span>",
    "",

    "<strong>◆ Convenience function</strong>",
    "1. v-currency",
    "<span class='text-caption'>- Developed only for entering amounts, including thousands separators.(based on v-text-field)</span>",
    "2. Component shortcut support",
    "<span class='text-caption'>- Improved development convenience by supporting abbreviated names. For example, v-autocomplete can be specified as 'autocomplete' or 'aut' .</span>",
    "</p>"
  ],
  "install": {
    "heading": "Installation",
    "body": [
      "<p class='text-body-2'>Since it is based on Vue2, please install vue2 first from the vue official site.",
      "",
      "* If you want to use vuetify as the main UI framework, please refer to the link below.",
      "<a href='https://vuetifyjs.com/en/getting-started/installation/' target='_blank'>vuetifyjs.com/en/getting-started/installation/</a>",
      "",
      "* lodash is required npm package.",
      "<a href=`https://lodash.com/` target=`_blank`>lodash.com/</a>",
      "",
      "* If you want to install element ui, please refer to the link below.",
      "<a href=`https://element.eleme.io/#/en-US/component/installation` target=`_blank`>element ui/</a>",
      "",
      "* For installation of ag grid and ag chart, refer to the link below.",
      "<a href=`https://www.ag-grid.com/vue-grid/getting-started/` target=`_blank`>ag grid</a>",
      "",
      "After all necessary packages are installed, install v-iterator.",
      "<pre class=`language-js`><code class=`language-js`>npm i v-iterator --save</code></pre>",
      "</p>",
      "<p class='text-body-2'>If you are using v-iterator globally, add the import statement in main.js.</p>",
      "<pre class=`language-js`><code class=`language-js`>",
      "import Vue from 'vue'",
      "import App from './App.vue'",
      "import {VIterator} from v-iterator",
      "Vue.component(VIterator.name, VIterator)",
      "",
      "new Vue({render: h => h(App)}).$mount('#app')",
      "</code></pre>",
      "<p class='text-body-2'>Then add the following to vue.config.js</p>",
      "<pre class=`language-js`><code class=`language-js`>",
      "module.exports = {",
      "  runtimeCompiler: true",
      "  configureWebpack: {",
      "    externals: {",
      "      'element-ui': 'element-ui', // Add if not using element-ui",
      "      'vuetify/lib: 'vuetify/lib' // Add if not using vuetify",
      "    }",
      "  }",
      "}",
      "</code></pre>",
      ""
    ]
  },
  "use": {
    "heading": "How to use",
    "body": [
      "<p class='text-body-2'>The parts provided by the original ui framework, such as props, events, and classes, can all be used the same.",
      "However, in the case of event, enter the method called by component event in the template area as v-on:method name='method name'.",
      "<pre class=`language-js`><code class=`language-js`>",
      "< template>",
      "  < v-iterator :dynamicARg=`screen` :data=`$data` @btnClick=`btnClick`/>",
      "< /template>",
      "< script>",
      "export default {",
      "  data: () => ({",
      "    screen: {",
      "      items: [",
      "        { component: 'container', fluid: true, items: [",
      "          { component: 'btn', color: 'grey lighten-3', itemtext: 'Block Button', style: 'width: 100%', events: [{ event: 'click', method: 'btnClick'}] },",
      "          { component: 'card', flat: true, items: [ { component: 'card-text', itemtext: 'textData'} ]}",
      "        ]}",
      "      ]",
      "    },",
      "    textData: 'Button clicked!',",
      "    clickedCount: 0",
      "  }),",
      "  methods: {",
      "    btnClick() {",
      "      this.clickedCount++;",
      "      this.textData = String('Button clicked!').concat(':', this.clickedCount)",
      "    }",
      "  }",
      "}",
      "< /script>",
      "</code></pre>",
      "</p><p class='text-body-2'>If it is inconvenient to enter the method name, you can write it as follows.</p>",
      "<pre class=`language-js`><code class=`language-js`>",
      "< template>",
      "  < v-iterator :dynamicARg=`screen` :data=`$data`/>",
      "< /template>",
      "< script>",
      "export default {",
      "  data: () => ({",
      "    screen: {",
      "      items: [",
      "        { component: 'container', fluid: true, items: [",
      "          { component: 'btn', color: 'grey lighten-3', itemtext: 'Block Button', style: 'width: 100%', events: [{ event: 'click', method: btnClick()}] },",
      "          { component: 'card', flat: true, items: [ { component: 'card-text', itemtext: 'textData'} ]}",
      "        ]}",
      "      ]",
      "    },",
      "    textData: 'Button clicked!',",
      "    clickedCount: 0",
      "  }),",
      "  methods: {",
      "    btnClick() {",
      "      this.clickedCount++;",
      "      this.textData = String('Button clicked!').concat(':', this.clickedCount)",
      "    }",
      "  }",
      "}",
      "< /script>",
      "</code></pre>",
      ""
    ]
  }
}