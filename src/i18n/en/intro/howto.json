{
  "basic": [
    "<p class='text-body-2'>The provided by the original ui framework, such as props, events, and classes, can all be used the same way.",
    "However, in the case of events, enter the method called by the component event in the template codes as v-on:method name = 'method name'.</p>",
    "<span class=`text-h5`>◆ Sample code</span>",
    "<pre class=`language-js`><code class=\"language-js\">\n< template >\n< v-iterator :dynamicArg=`screen` :data=`$data` @btnClick=`btnClick`/>\n< /template >",
    "< script >\nexport default {\n  data: () => ({\n    screen: {\n      items: [\n        { component: 'container', fluid: true, items: [\n          { component: 'btn', color: 'grey lighten-3', itemtext: 'Block Button', style: 'width: 100%', events: [{ event: 'click', method: 'btnClick'}] },\n          { component: 'card', flat: true, items: [ { component: 'card-text', itemtext: 'textData'} ]}\n        ]}\n      ]\n    },\n    textData: 'Button clicked!',\n    clickedCount: 0\n  }),",
    "  methods: {\n    btnClick() {\n      this.clickedCount++;\n      this.textData = String('Button clicked!').concat(':', this.clickedCount)\n    }\n  }\n}",
    "< /script > ",
    "</code></pre>",

    "<span class=`text-h5`>◆ Properties</span>",
    "<span class='text-body-2'><strong>- dynamicArg</strong>: Binding an object containing information about the screen structure.  Binding targets are props, data, computed, return value from method",
    "  * Binding object has structure like {items: [{component: 'component name', class: value, style: value, property: value }]}. If you want to add child components, use items attribute.</span>",
    "<pre class=`language-js`><code class=\"language-js\">{ items: [{ component: 'container', class: 'pa-0', items: [{component: 'btn', style: 'width: 100px;', text: true }] }] }</code></pre>",
    "<span class='text-body-2'><strong>- data</strong>: Binding data object to useed in actual components. Props or computed cannot be bound.</span>",
    "",
    "<span class=`text-h5`>◆ v-for</span>",
    "<span class='text-body-2'>- If you need to add child components using v-for, use it as follows.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'container', itemsfor: 5, subItemName: 'item', items: [{component: 'btn', itemtext: 'item'}] }] }",
    "</code></pre>",
    
    "<span class='text-body-2'>  * Above code is same with below vue template code.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "< v-container ><v-for=\"item in 5\">< v-btn >{{item}}< /v-btn ></v-for> < /v-container >",
    "</code></pre>",

    "<span class='text-body-2'>- Use data array name is 'items' at v-for.",
    "items = [{name: 'test1', name: 'test2'}] </span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'container', itemsfor: 'items', subItemName: 'item', items: [{component: 'btn', itemtext: 'item.name'}] }] }",
    "</code></pre>",
    "<span class='text-body-2'>or</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'container', itemsfor: this.items, subItemName: 'item', items: [{component: 'btn', itemtext: 'item.name'} ]} ]}",
    "</code></pre>",

    "<span class='text-body-2'>- SubItemName is optional and default name is 'subItem'.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'container', itemsfor: 'items', items: [{component: 'btn', itemtext: 'subItem'} ]} ]}",
    "</code></pre>",

    "<span class=`text-h5`>◆ v-if / v-show",
    "<span class='text-body-2'>- Use v-if or v-show as follows.",
    "item = {type: 'group', value: 'test'}</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'text', if: [{target: 'item.type', value: 'group'}, {target: 'item.value', value: 'test'}] }] }",
    "{ items: [{ component: 'text', show: [{target: 'item.type', value: 'group'}, {target: 'item.value', value: 'test'}] }] }",
    "</code></pre>",

    "<span class='text-body-2'>It can also be used in the following ways:</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'text', if: this.item.type === 'group' && this.item.value === 'test' }] }",
    "</code></pre>",

    "<span class=`text-h5`>◆ event</span>",
    "<span class='text-body-2'>- Use event as follows</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'btn', evnts: [{event: 'click', method: 'method name'}] }] }",
    "</code></pre>",

    "<span class='text-body-2'>If you do not specify a value to be passed, an event object is passed.",
    "If you want to specify a value to be passed, write it as follows.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'btn', evnts: [{event: 'click', value: 'item', method: 'btnClick'}] }] }",
    "",
    
    "methods: { btnClick(param) { alert('Button is clicked with ' + param) } }",
    "</code></pre>",
    "<span class='text-body-2'>If the above item is declared in data, the item object value is passed to the 'btnClick' method.",
    "To receive value and event object together, declare as methodName (param, event) {} when declaring a method.</span>",
    "",

    "<span class='text-body-2'>There is also a way to directly execute a function without calling the method.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'btn', evnts: [{ event: 'click', func: (event) => {console.log(event)} }] }] }",
    "</code></pre>",
    "",
    "<span class='text-body-2'>As with methods, if you want to pass values ​​and events to functions, you can process them as follows.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ items: [{ component: 'btn', evnts: [{ event: 'click', value: 'item', func: (item, event) => {console.log(item, event)} }] }] }",
    "</code></pre>",

    "<span class=`text-h5`>◆ v-model</span>",
    "<span class='text-body-2'>v-model is used as below.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "data () => {itemtext: ''}",
    "{ items: [{ component: 'text-field', model: 'itemtext' }",
    "</code></pre>",

    "<span class=`text-h5`>◆ slot</span>",
    "<span class='text-body-2'>- If there is no return value",
    "slots: [{name: 'slot name', items: [child component]}]</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ component: 'btn', class: 'ma-2', loading: 'loading2', disabled: 'loading2', itemtext: 'Custom Loader', color: 'success',",
    "  evnts: [{ event: 'click', method: 'changeLoader', value: '2'}],",
    "  slots: [{ name: 'loader', items: [{ component: 'text', class: 'ma-0 pa-0', itemtext: 'Loading...'}]}]",
    "}",
    "</code></pre>",

    "<span class='text-body-2'>- If ther is a return value",
    "slots: [{name: 'slot name', type: 'data', slotDataName: ' ', items: [] }]",
    "If slotDataName is not specified, the default name is 'slotData'</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{ component: 'div', itemsfor: 8, items: [",
    " { component: 'item', slots: [",
    "   {name: 'default', type: 'data', slotDataName: 'slot', items: [",
    "     { component: 'chip', activeClass: 'purple--text', inputValue: 'slot.active', ",
    "       evnts: [{event: 'click', value: 'slot.toggle', func: e => e()}], ",
    "       itemtext: {value: 'subItem', func: e => `Tag ${e}`}",
    "     }]",
    "   }]",
    " }]",
    "}",
    "</code></pre>",

    "<span class=`text-h5`>◆ reference</span>",
    "<span class='text-body-2'>When you need to call a sub-component directly, you use a reference,",
    "and in v-iterator, the screen composition has to be interpreted inside the v-iterator component, so it is expressed as follows.</span>",
    "<pre class=`language-js`><code class=\"language-js\">\n< template >\n< v-iterator :ref=\"iterator\" :dynamicArg=\"screen\" :data=\"$data\" />\n< /template >",
    "< script >\nexport default {\ndata: () => ({",
    "   screen: { items: [",
    "     { component: 'sheet', height: '600', items: [",
    "         { component: 'calendar', ref: 'calendar', model: 'focus', color: 'primary', type: 'category',",
    "           categoryShowAll: true, categories: 'categories', events: 'events', eventColor: 'eventColor',",
    "           evnts: [{ event: 'change', method: 'changeCalendar'}]",
    "         }]",
    "     }]",
    "   ]}",
    "   focus: '', events: [], eventColor: (event) => event.color",
    "}),",
    "methods: { changeCalendar() { this.calendar = this.$refs.iterator.getRef('calendar') }",
    "}\n< /script > ",
    "</code></pre>",
    "<span class='text-body-2'>In other words, after designating the v-iterator component as a reference (:ref=\"iterator\") in the template area, specify the ref attribute (ref: 'calendar') in the location of the component to use the actual reference in the screen definition.</span>",
    "<span class='text-body-2'>When using an actual reference, call (this.$refs.iterator.getRef('calendar')) the predefine getRef('ref property value in screen definition') and use it.</span>",
    "",

    "<span class=`text-h5`>◆ Etc</span>",
    "<span class='text-body-2'><code>- itemtext</code> is a property added to deal with the following situations:</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "< template >< v-btn >Test< /v-btn >< /template >",
    "</code></pre>",
    "<span class='text-body-2'>In the above case, v-iterator is expressed as follows.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{items: [ {component: 'btn', itemtext: 'Test' } ]}",
    "</code></pre>",
    "<span class='text-body-2'>If you want to transform text and use it, you can use it as follows.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{items: [ {component: 'btn', itemtext: {value: 'Test', func(t) => String('Button-').concat(t) } } ]}",
    "</code></pre>",
    "<span class='text-body-2'>- If you want to apply html instead of string, use 'html' attribute instead of 'itemtext'.</span>",
    "",
    "<span class='text-body-2'>- When using vuetify and element at the same time, use the 'framework' property to prevent duplicate component names.</span>",
    "<span class='text-body-2'>default fraework is 'vuetify'.</span>",
    "<pre class=`language-js`><code class=\"language-js\">",
    "{items: [ {component: 'btn', itemtext: 'Vuetify Button' }, {component: 'btn', framework: 'el', itemtext: 'Element Button' } ]}",
    "</code></pre>",
    "<span class='text-body-2'></span>",
    ""
  ]
}